# nova.conf
[DEFAULT]
debug = {{ nova.logging_debug }}

api_paste_config = /etc/nova/api-paste.ini
state_path = /var/lib/nova

#FIXME
osapi_compute_listen = {{ network_topology["private"]["address"] }}
osapi_compute_listen_port = {{ nova.api_port }}

#FIXME
metadata_listen = {{ network_topology["private"]["address"] }}
metadata_listen_port = {{ nova.metadata.port }}

#FIXME
ec2_listen = {{ network_topology["private"]["address"] }}
ec2_listen_port = {{ nova.api_ec2_port }}

notification_driver = noop

use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver
scheduler_max_attempts = 10

{% if neutron_plugin_agent == "openvswitch" %}
linuxnet_interface_driver = nova.network.linux_net.LinuxOVSInterfaceDriver
{% elif neutron_plugin_agent == "linuxbridge" %}
linuxnet_interface_driver = nova.network.linux_net.BridgeInterfaceDriver
{% endif %}

allow_resize_to_same_host = true

{% if enable_ironic %}
scheduler_host_manager = nova.scheduler.ironic_host_manager.IronicHostManager
{% endif %}

compute_driver = libvirt.LibvirtDriver

# Here we need to pass an array of memcached daemons, for now we just use DNS
# FIXME
memcached_servers = {{ address('memcached') }}


# Though my_ip is not used directly, lots of other variables use $my_ip
my_ip = {{ network_topology["private"]["address"] }}

{% if nova.console == 'novnc' %}
novncproxy_host = {{ network_topology["private"]["address"] }}
novncproxy_port = {{ nova.novncproxy_port }}
[vnc]
vncserver_listen = {{ network_topology["private"]["address"] }}
#FIXME
vncserver_proxyclient_address = {{ network_topology["private"]["address"] }}
# We need to create a cont name jinja vars
# FIXME
{# if service_name == "nova-compute" #}
#FIXME
novncproxy_base_url = http://{{ address('nova-novncproxy') }}:{{ nova.novncproxy_port }}/vnc_auto.html
{# endif #}
{% elif nova.console == 'spice' %}
[vnc]
# We have to turn off vnc to use spice
enabled = false
[spice]
server_listen = {{ network_topology["private"]["address"] }}
server_proxyclient_address = {{ nova.spicehtml5proxy.host }}
{% if service_name == "nova-compute" %}
html5proxy_base_url = http://{{ address('nova-html5proxy') }}:{{ nova.spicehtml5proxy.port }}/spice_auto.html
{% endif %}
html5proxy_host = {{ nova.spicehtml5proxy.host }}
html5proxy_port = {{ nova.spicehtml5proxy.port }}
{% endif %}

# FIXME
{% if service_name == "nova-compute-ironic" %}
[ironic]
#(TODO) remember to update this once discoverd is replaced by inspector
admin_username = {{ ironic_keystone_user }}
admin_password = {{ ironic_keystone_password }}
admin_url = {{ openstack_auth_url }}
admin_tenant_name = service
api_endpoint = http://{{ address('ironic-api') }}:{{ ironic_api_port }}/v1
{% endif %}

[oslo_messaging_rabbit]
rabbit_userid = {{ rabbitmq.user }}
rabbit_password = {{ rabbitmq.password }}
rabbit_ha_queues = true
# We need to pass an array of RBMQ server here
# FIXME
rabbit_hosts = {{ address('rabbitmq') }}

[oslo_concurrency]
lock_path = /var/lib/nova/tmp

[glance]
# FIXME
api_servers = {{ address('glance-api') }}:{{ glance.api_port }}
# We need to do N number of retries here, N = number of glance-api daemons running
# FIXME
num_retries = 1

[cinder]
catalog_info = volume:cinder:internalURL

[neutron]
url = http://{{ address('neutron-server') }}:{{ neutron_server_port }}
auth_strategy = keystone
metadata_proxy_shared_secret = {{ nova.metadata.secret }}
service_metadata_proxy = true

auth_url = http://{{ address('keystone') }}:{{ keystone.admin_port }}
auth_plugin = password
project_domain_name = default
user_domain_id = default
project_name = service
username = {{ neutron_db_username }}
password = {{ neutron_db_password }}

[database]
connection = mysql+pymysql://{{ nova.db.username }}:{{ nova.db.password }}@{{ address('mariadb') }}/{{ nova.db.name }}
max_pool_size = 50
max_overflow = 1000
max_retries = -1

[api_database]
connection = mysql+pymysql://{{ nova.db.username }}:{{ nova.db.password }}@{{ address('mariadb') }}/{{ nova.db.api_name }}
max_retries = -1

[cache]
backend = oslo_cache.memcache_pool
enabled = True
# FIXME
memcache_servers = {{ address('memcached') }}

[keystone_authtoken]
auth_version = v3
auth_uri = http://{{ address('keystone') }}:{{ keystone.public_port }}/v3
auth_url = http://{{ address('keystone') }}:{{ keystone.admin_port }}/v3
auth_plugin = password
project_domain_id = default
user_domain_id = default
project_name = service
username = {{ nova.db.username }}
password = {{ nova.db.password }}
memcached_servers = {{ address('memcached') }}:{{ memcached.port }}

[libvirt]
virt_type = {{ nova.virt_type }}
#Need to split file in sections to avoid confussion with wrong IP here for non compute services
connection_uri = "qemu+tcp://{{ network_topology["private"]["address"] }}/system"
{% if nova.enable_ceph %}
images_type = rbd
images_rbd_pool = {{ ceph_nova_pool_name }}
images_rbd_ceph_conf = /etc/ceph/ceph.conf
rbd_user = nova
rbd_secret_uuid = {{ rbd_secret_uuid }}
disk_cachemodes="network=writeback"
live_migration_flag="VIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER,VIR_MIGRATE_LIVE,VIR_MIGRATE_PERSIST_DEST,VIR_MIGRATE_TUNNELLED"
hw_disk_discard = unmap
{% endif %}

[upgrade_levels]
compute = auto
